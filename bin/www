#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('MoneyTracker:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var io = require("socket.io").listen(server);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

gamesList = {
                sampleGame:{
                    playerList:
                    [
                        {
                            name: "Andrei",
                            money: 123.34
                        },
                        {
                            name: "Jonah",
                            money: -100000000.0
                        },
                        {
                            name: "Paul",
                            money: 0937.80
                        },
                        {
                            name: "Jason",
                            money: 80085.69
                         },
                         {
                            name: "Chris",
                            money: 0.00
                         }
                    ],
                    gameName: "sampleGame",
                    numberOfPlayers: 5
                },
                testConnection:{
                    playerList:
                    [
                        {
                            name: "Andrei",
                            imoney: 100.00,
                            money: 100
                        },
                        {
                            name: "Jonah",
                            imoney: -100000000.0,
                            money: -100000000.0
                        },
                        {
                            name: "Paul",
                            imoney: 937.80,
                            money: 937.80
                        },
                        {
                            name: "Jason",
                            imoney: 80085.69,
                            money: 80085.69
                         },
                         {
                            name: "Chris",
                            imoney: 1.00,
                            money: 1.00
                         }
                    ],
                    gameName: "sampleGame",
                    numberOfPlayers: 5
                }
            }

// socket things
io.on('connection', function (socket) {
    socket.emit('gameStart', gamesList["sampleGame"]);
    
    socket.on('my other event', function (data) {
        console.log(data);
    });

    var testConnection = function(game){
        players = gamesList["testConnection"]["playerList"];
        console.log(players)
        for (player in players){
            if(players.hasOwnProperty(player)){
                players[player]['money'] = Math.random()*players[player]['imoney'] 
                console.log(players[player]['money']);
            }    
        }             
        socket.emit('testConnection', game)
        console.log("Sending Socket");
    }
    
    setInterval(function(){
        testConnection(gamesList["testConnection"]);
        }, 2000);
    
    socket.on('updateGameData', function(newGameData){ 
                
    })
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
